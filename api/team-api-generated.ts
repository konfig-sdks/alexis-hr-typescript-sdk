/* tslint:disable */
/* eslint-disable */
/*
AlexisHR API

<h1 id=\"introduction\">Introduction</h1>
<p>
  AlexisHR API is currently in preview. This means that small, backward
  incompatible changes might be introduced while in preview. The changes will be
  documented and communicated.
  <a
    href=\"https://cdn.forms-content.sg-form.com/56c6a65c-90a2-11eb-a700-a6de1aea3a1a\"
    target=\"_blank\"
    ><button>Subscribe to updates</button></a
  >
</p>

<h1 id=\"authentication\">Authentication</h1>
<pre class=\"click-to-expand-wrapper is-snippet-wrapper language-undefined\">
<code class=\"is-highlighted language-bash\">curl https://api.alexishr.com/v1/employee \\
  -H \"Authorization: Bearer &lt;your_access_token&gt;\"</code>
</pre>
<p>
  Authenticate your account when using the API by including your secret Access
  Token in the request.
  <a href=\"https://app.alexishr.com/access-tokens\">Manage your Access Tokens</a
  >.
</p>
<p>
  Authentication is performed by passing the Access Token in the Authorization
  header.
</p>
<hr />

<h1 id=\"structure\">Structure</h1>
<p>
  You will find the structure of the API to be highly uniform and consistent.
  Typically every resource can be accessed via a top level endpoint, such as
  <code>/v1/employee</code>. For every such resource, you can perform some of
  the following operations:
</p>
<h2>Operations</h2>
<table>
  <tr>
    <td>GET /v1/:resource</td>
    <td>List all objects of this type</td>
  </tr>
  <tr>
    <td>GET /v1/:resource/:id</td>
    <td>Retrieve a resource by id</td>
  </tr>
  <tr>
    <td>POST /v1/:resource</td>
    <td>Create a resource of this type</td>
  </tr>
  <tr>
    <td>PATCH /v1/:resource/:id</td>
    <td>Update the resource by id</td>
  </tr>
  <tr>
    <td>DELETE /v1/:resource/:id</td>
    <td>Delete the resource by id</td>
  </tr>
</table>
<hr />

<h1 id=\"roles\">Roles</h1>
<p>The Access Tokens will have owner permission on the account</p>
<hr />

<h1 id=\"filters\">Filters</h1>
<p>
  Some of the list endpoints allow to filter results by certain conditions.
  Refer to specific resources to find out what criteria are allowed. Below is a
  list of the different conditions.
</p>

<h4 id=\"eq\"><code>$eq</code></h4>
<p>Find all results matching the attribute value specified.</p>
<div>
  <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$eq]=value</code></pre>
</div>
<p>Can also be simplified like this.</p>
<div>
  <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName]=value</code></pre>
</div>

<h4 id=\"neq\"><code>$neq</code></h4>
<p>Find all results not matching the attribute value specified.</p>
<div>
  <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$neq]=value</code></pre>
</div>

<h4 id=\"gt\"><code>$gt</code>, <code>$gte</code></h4>
<p>
  Find all results where the value is more (<code>$gt</code>) or more and equal
  (<code>$gte</code>) to a given value.
</p>
<div>
  <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$gte]=2020-01-01</code></pre>
</div>
<hr />

<h4 id=\"lt\"><code>$lt</code>, <code>$lte</code></h4>
<p>
  Find all results where the value is less (<code>$lt</code>) or less and equal
  (<code>$lte</code>) to a given value.
</p>
<div>
  <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$lte]=2020-01-01</code></pre>
</div>
<hr />

<h4 id=\"in\"><code>$in</code>, <code>$nin</code></h4>
<p>
  Find all results matching (<code>$in</code>) or not matching
  (<code>$nin</code>) any of the attribute values specified.
</p>
<div>
  <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$in][]=value1&filters[fieldName][$in][]=value2</code></pre>
</div>
<hr />

<h4 id=\"between\"><code>$between</code></h4>
<p>Find all results between two values specified.</p>
<div>
  <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$between][]=2020-01-01&filters[startDate][$between][]=2020-12-31</code></pre>
</div>
<hr />

<h1 id=\"versioning\">Versioning</h1>
<p>
  Each version of the API is guaranteed to be compatible with the resources of
  the same version. When we make breaking changes to the API a new version will
  be published
</p>
<hr />

<h1 id=\"changelog\">Changelog</h1>
<h3>2023-12-20</h3>
<p>Field [updated] added for filter & select for Get Many Employments and Get Many Employees.</p>
<h3>2021-03-15</h3>
<p>First draft was published</p>
<hr />

# Authentication

<!-- ReDoc-Inject: <security-definitions> -->

The version of the OpenAPI document: v1-preview
Contact: support@alexishr.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequestResponse } from '../models';
// @ts-ignore
import { CreateTeamRequest } from '../models';
// @ts-ignore
import { EmptyResponseMapped } from '../models';
// @ts-ignore
import { ForbiddenResponse } from '../models';
// @ts-ignore
import { InternalServerErrorResponse } from '../models';
// @ts-ignore
import { NotFoundResponse } from '../models';
// @ts-ignore
import { TeamGetOneResponseMapped } from '../models';
// @ts-ignore
import { TeamListTeamsFiltersParameter } from '../models';
// @ts-ignore
import { TeamListTeamsSortParameter } from '../models';
// @ts-ignore
import { TeamResponseMapped } from '../models';
// @ts-ignore
import { TeamsGetManyResponseMapped } from '../models';
// @ts-ignore
import { UnauthorizedResponse } from '../models';
// @ts-ignore
import { UpdateTeamRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TeamApi - axios parameter creator
 * @export
 */
export const TeamApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create One Team
         * @summary Create One Team
         * @param {CreateTeamRequest} createTeamRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneTeam: async (createTeamRequest: CreateTeamRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTeamRequest' is not null or undefined
            assertParamExists('createOneTeam', 'createTeamRequest', createTeamRequest)
            const localVarPath = `/team`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createTeamRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/team',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createTeamRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete One Team
         * @summary Delete One Team
         * @param {string} id Resource Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteOne', 'id', id)
            const localVarPath = `/team/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/team/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get One Team
         * @summary Get One Team
         * @param {string} id Resource Id
         * @param {Array<'id' | 'companyId' | 'name' | 'description' | 'bgColor' | 'fgColor'>} [select] Select Team fields, comma-separated. (e.g. &#x60;select&#x3D;id,firstName,lastName,workEmail&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneTeam: async (id: string, select?: Array<'id' | 'companyId' | 'name' | 'description' | 'bgColor' | 'fgColor'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOneTeam', 'id', id)
            const localVarPath = `/team/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (select) {
                localVarQueryParameter['select'] = select.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/team/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Many Teams
         * @summary Get Many Teams
         * @param {Array<'id' | 'companyId' | 'name' | 'description' | 'bgColor' | 'fgColor'>} [select] Select Team fields, comma-separated. (e.g. &#x60;select&#x3D;id,firstName,lastName,workEmail&#x60;)
         * @param {TeamListTeamsFiltersParameter} [filters] Filters conditions per field. (e.g. &#x60;filters[id][$eq]&#x3D;507f1f77bcf86cd799439011&#x60;)
         * @param {number} [limit] Limit amount of received Teams. (e.g. &#x60;limit&#x3D;20&#x60;)
         * @param {number} [offset] Offset amount of received Teams. (e.g. &#x60;offset&#x3D;20&#x60;)
         * @param {TeamListTeamsSortParameter} [sort] Sort received Teams by field. (e.g. &#x60;sort[id]&#x3D;asc&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeams: async (select?: Array<'id' | 'companyId' | 'name' | 'description' | 'bgColor' | 'fgColor'>, filters?: TeamListTeamsFiltersParameter, limit?: number, offset?: number, sort?: TeamListTeamsSortParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/team`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (select) {
                localVarQueryParameter['select'] = select.join(COLLECTION_FORMATS.csv);
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/team',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replace One Team
         * @summary Replace One Team
         * @param {string} id Resource Id
         * @param {UpdateTeamRequest} updateTeamRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceTeam: async (id: string, updateTeamRequest: UpdateTeamRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('replaceTeam', 'id', id)
            // verify required parameter 'updateTeamRequest' is not null or undefined
            assertParamExists('replaceTeam', 'updateTeamRequest', updateTeamRequest)
            const localVarPath = `/team/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateTeamRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/team/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateTeamRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update One Team
         * @summary Update One Team
         * @param {string} id Resource Id
         * @param {UpdateTeamRequest} updateTeamRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeam: async (id: string, updateTeamRequest: UpdateTeamRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTeam', 'id', id)
            // verify required parameter 'updateTeamRequest' is not null or undefined
            assertParamExists('updateTeam', 'updateTeamRequest', updateTeamRequest)
            const localVarPath = `/team/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateTeamRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/team/{id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateTeamRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamApi - functional programming interface
 * @export
 */
export const TeamApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamApiAxiosParamCreator(configuration)
    return {
        /**
         * Create One Team
         * @summary Create One Team
         * @param {TeamApiCreateOneTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOneTeam(requestParameters: TeamApiCreateOneTeamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamResponseMapped>> {
            const createTeamRequest: CreateTeamRequest = {
                description: requestParameters.description,
                name: requestParameters.name,
                bgColor: requestParameters.bgColor,
                fgColor: requestParameters.fgColor
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOneTeam(createTeamRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete One Team
         * @summary Delete One Team
         * @param {TeamApiDeleteOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOne(requestParameters: TeamApiDeleteOneRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmptyResponseMapped>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOne(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get One Team
         * @summary Get One Team
         * @param {TeamApiGetOneTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOneTeam(requestParameters: TeamApiGetOneTeamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamGetOneResponseMapped>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOneTeam(requestParameters.id, requestParameters.select, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Many Teams
         * @summary Get Many Teams
         * @param {TeamApiListTeamsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTeams(requestParameters: TeamApiListTeamsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamsGetManyResponseMapped>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTeams(requestParameters.select, requestParameters.filters, requestParameters.limit, requestParameters.offset, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replace One Team
         * @summary Replace One Team
         * @param {TeamApiReplaceTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceTeam(requestParameters: TeamApiReplaceTeamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamResponseMapped>> {
            const updateTeamRequest: UpdateTeamRequest = {
                description: requestParameters.description,
                name: requestParameters.name,
                bgColor: requestParameters.bgColor,
                fgColor: requestParameters.fgColor
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceTeam(requestParameters.id, updateTeamRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update One Team
         * @summary Update One Team
         * @param {TeamApiUpdateTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTeam(requestParameters: TeamApiUpdateTeamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamResponseMapped>> {
            const updateTeamRequest: UpdateTeamRequest = {
                description: requestParameters.description,
                name: requestParameters.name,
                bgColor: requestParameters.bgColor,
                fgColor: requestParameters.fgColor
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTeam(requestParameters.id, updateTeamRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeamApi - factory interface
 * @export
 */
export const TeamApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamApiFp(configuration)
    return {
        /**
         * Create One Team
         * @summary Create One Team
         * @param {TeamApiCreateOneTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneTeam(requestParameters: TeamApiCreateOneTeamRequest, options?: AxiosRequestConfig): AxiosPromise<TeamResponseMapped> {
            return localVarFp.createOneTeam(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete One Team
         * @summary Delete One Team
         * @param {TeamApiDeleteOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOne(requestParameters: TeamApiDeleteOneRequest, options?: AxiosRequestConfig): AxiosPromise<EmptyResponseMapped> {
            return localVarFp.deleteOne(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get One Team
         * @summary Get One Team
         * @param {TeamApiGetOneTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneTeam(requestParameters: TeamApiGetOneTeamRequest, options?: AxiosRequestConfig): AxiosPromise<TeamGetOneResponseMapped> {
            return localVarFp.getOneTeam(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Many Teams
         * @summary Get Many Teams
         * @param {TeamApiListTeamsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeams(requestParameters: TeamApiListTeamsRequest, options?: AxiosRequestConfig): AxiosPromise<TeamsGetManyResponseMapped> {
            return localVarFp.listTeams(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace One Team
         * @summary Replace One Team
         * @param {TeamApiReplaceTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceTeam(requestParameters: TeamApiReplaceTeamRequest, options?: AxiosRequestConfig): AxiosPromise<TeamResponseMapped> {
            return localVarFp.replaceTeam(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update One Team
         * @summary Update One Team
         * @param {TeamApiUpdateTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeam(requestParameters: TeamApiUpdateTeamRequest, options?: AxiosRequestConfig): AxiosPromise<TeamResponseMapped> {
            return localVarFp.updateTeam(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createOneTeam operation in TeamApi.
 * @export
 * @interface TeamApiCreateOneTeamRequest
 */
export type TeamApiCreateOneTeamRequest = {
    
} & CreateTeamRequest

/**
 * Request parameters for deleteOne operation in TeamApi.
 * @export
 * @interface TeamApiDeleteOneRequest
 */
export type TeamApiDeleteOneRequest = {
    
    /**
    * Resource Id
    * @type {string}
    * @memberof TeamApiDeleteOne
    */
    readonly id: string
    
}

/**
 * Request parameters for getOneTeam operation in TeamApi.
 * @export
 * @interface TeamApiGetOneTeamRequest
 */
export type TeamApiGetOneTeamRequest = {
    
    /**
    * Resource Id
    * @type {string}
    * @memberof TeamApiGetOneTeam
    */
    readonly id: string
    
    /**
    * Select Team fields, comma-separated. (e.g. `select=id,firstName,lastName,workEmail`)
    * @type {Array<'id' | 'companyId' | 'name' | 'description' | 'bgColor' | 'fgColor'>}
    * @memberof TeamApiGetOneTeam
    */
    readonly select?: Array<'id' | 'companyId' | 'name' | 'description' | 'bgColor' | 'fgColor'>
    
}

/**
 * Request parameters for listTeams operation in TeamApi.
 * @export
 * @interface TeamApiListTeamsRequest
 */
export type TeamApiListTeamsRequest = {
    
    /**
    * Select Team fields, comma-separated. (e.g. `select=id,firstName,lastName,workEmail`)
    * @type {Array<'id' | 'companyId' | 'name' | 'description' | 'bgColor' | 'fgColor'>}
    * @memberof TeamApiListTeams
    */
    readonly select?: Array<'id' | 'companyId' | 'name' | 'description' | 'bgColor' | 'fgColor'>
    
    /**
    * Filters conditions per field. (e.g. `filters[id][$eq]=507f1f77bcf86cd799439011`)
    * @type {TeamListTeamsFiltersParameter}
    * @memberof TeamApiListTeams
    */
    readonly filters?: TeamListTeamsFiltersParameter
    
    /**
    * Limit amount of received Teams. (e.g. `limit=20`)
    * @type {number}
    * @memberof TeamApiListTeams
    */
    readonly limit?: number
    
    /**
    * Offset amount of received Teams. (e.g. `offset=20`)
    * @type {number}
    * @memberof TeamApiListTeams
    */
    readonly offset?: number
    
    /**
    * Sort received Teams by field. (e.g. `sort[id]=asc`)
    * @type {TeamListTeamsSortParameter}
    * @memberof TeamApiListTeams
    */
    readonly sort?: TeamListTeamsSortParameter
    
}

/**
 * Request parameters for replaceTeam operation in TeamApi.
 * @export
 * @interface TeamApiReplaceTeamRequest
 */
export type TeamApiReplaceTeamRequest = {
    
    /**
    * Resource Id
    * @type {string}
    * @memberof TeamApiReplaceTeam
    */
    readonly id: string
    
} & UpdateTeamRequest

/**
 * Request parameters for updateTeam operation in TeamApi.
 * @export
 * @interface TeamApiUpdateTeamRequest
 */
export type TeamApiUpdateTeamRequest = {
    
    /**
    * Resource Id
    * @type {string}
    * @memberof TeamApiUpdateTeam
    */
    readonly id: string
    
} & UpdateTeamRequest

/**
 * TeamApiGenerated - object-oriented interface
 * @export
 * @class TeamApiGenerated
 * @extends {BaseAPI}
 */
export class TeamApiGenerated extends BaseAPI {
    /**
     * Create One Team
     * @summary Create One Team
     * @param {TeamApiCreateOneTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApiGenerated
     */
    public createOneTeam(requestParameters: TeamApiCreateOneTeamRequest, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).createOneTeam(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete One Team
     * @summary Delete One Team
     * @param {TeamApiDeleteOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApiGenerated
     */
    public deleteOne(requestParameters: TeamApiDeleteOneRequest, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).deleteOne(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get One Team
     * @summary Get One Team
     * @param {TeamApiGetOneTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApiGenerated
     */
    public getOneTeam(requestParameters: TeamApiGetOneTeamRequest, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).getOneTeam(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Many Teams
     * @summary Get Many Teams
     * @param {TeamApiListTeamsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApiGenerated
     */
    public listTeams(requestParameters: TeamApiListTeamsRequest, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).listTeams(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replace One Team
     * @summary Replace One Team
     * @param {TeamApiReplaceTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApiGenerated
     */
    public replaceTeam(requestParameters: TeamApiReplaceTeamRequest, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).replaceTeam(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update One Team
     * @summary Update One Team
     * @param {TeamApiUpdateTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApiGenerated
     */
    public updateTeam(requestParameters: TeamApiUpdateTeamRequest, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).updateTeam(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
