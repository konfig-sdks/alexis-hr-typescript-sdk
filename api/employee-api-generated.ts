/* tslint:disable */
/* eslint-disable */
/*
AlexisHR API

<h1 id=\"introduction\">Introduction</h1>
<p>
  AlexisHR API is currently in preview. This means that small, backward
  incompatible changes might be introduced while in preview. The changes will be
  documented and communicated.
  <a
    href=\"https://cdn.forms-content.sg-form.com/56c6a65c-90a2-11eb-a700-a6de1aea3a1a\"
    target=\"_blank\"
    ><button>Subscribe to updates</button></a
  >
</p>

<h1 id=\"authentication\">Authentication</h1>
<pre class=\"click-to-expand-wrapper is-snippet-wrapper language-undefined\">
<code class=\"is-highlighted language-bash\">curl https://api.alexishr.com/v1/employee \\
  -H \"Authorization: Bearer &lt;your_access_token&gt;\"</code>
</pre>
<p>
  Authenticate your account when using the API by including your secret Access
  Token in the request.
  <a href=\"https://app.alexishr.com/access-tokens\">Manage your Access Tokens</a
  >.
</p>
<p>
  Authentication is performed by passing the Access Token in the Authorization
  header.
</p>
<hr />

<h1 id=\"structure\">Structure</h1>
<p>
  You will find the structure of the API to be highly uniform and consistent.
  Typically every resource can be accessed via a top level endpoint, such as
  <code>/v1/employee</code>. For every such resource, you can perform some of
  the following operations:
</p>
<h2>Operations</h2>
<table>
  <tr>
    <td>GET /v1/:resource</td>
    <td>List all objects of this type</td>
  </tr>
  <tr>
    <td>GET /v1/:resource/:id</td>
    <td>Retrieve a resource by id</td>
  </tr>
  <tr>
    <td>POST /v1/:resource</td>
    <td>Create a resource of this type</td>
  </tr>
  <tr>
    <td>PATCH /v1/:resource/:id</td>
    <td>Update the resource by id</td>
  </tr>
  <tr>
    <td>DELETE /v1/:resource/:id</td>
    <td>Delete the resource by id</td>
  </tr>
</table>
<hr />

<h1 id=\"roles\">Roles</h1>
<p>The Access Tokens will have owner permission on the account</p>
<hr />

<h1 id=\"filters\">Filters</h1>
<p>
  Some of the list endpoints allow to filter results by certain conditions.
  Refer to specific resources to find out what criteria are allowed. Below is a
  list of the different conditions.
</p>

<h4 id=\"eq\"><code>$eq</code></h4>
<p>Find all results matching the attribute value specified.</p>
<div>
  <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$eq]=value</code></pre>
</div>
<p>Can also be simplified like this.</p>
<div>
  <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName]=value</code></pre>
</div>

<h4 id=\"neq\"><code>$neq</code></h4>
<p>Find all results not matching the attribute value specified.</p>
<div>
  <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$neq]=value</code></pre>
</div>

<h4 id=\"gt\"><code>$gt</code>, <code>$gte</code></h4>
<p>
  Find all results where the value is more (<code>$gt</code>) or more and equal
  (<code>$gte</code>) to a given value.
</p>
<div>
  <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$gte]=2020-01-01</code></pre>
</div>
<hr />

<h4 id=\"lt\"><code>$lt</code>, <code>$lte</code></h4>
<p>
  Find all results where the value is less (<code>$lt</code>) or less and equal
  (<code>$lte</code>) to a given value.
</p>
<div>
  <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$lte]=2020-01-01</code></pre>
</div>
<hr />

<h4 id=\"in\"><code>$in</code>, <code>$nin</code></h4>
<p>
  Find all results matching (<code>$in</code>) or not matching
  (<code>$nin</code>) any of the attribute values specified.
</p>
<div>
  <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$in][]=value1&filters[fieldName][$in][]=value2</code></pre>
</div>
<hr />

<h4 id=\"between\"><code>$between</code></h4>
<p>Find all results between two values specified.</p>
<div>
  <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$between][]=2020-01-01&filters[startDate][$between][]=2020-12-31</code></pre>
</div>
<hr />

<h1 id=\"versioning\">Versioning</h1>
<p>
  Each version of the API is guaranteed to be compatible with the resources of
  the same version. When we make breaking changes to the API a new version will
  be published
</p>
<hr />

<h1 id=\"changelog\">Changelog</h1>
<h3>2023-12-20</h3>
<p>Field [updated] added for filter & select for Get Many Employments and Get Many Employees.</p>
<h3>2021-03-15</h3>
<p>First draft was published</p>
<hr />

# Authentication

<!-- ReDoc-Inject: <security-definitions> -->

The version of the OpenAPI document: v1-preview
Contact: support@alexishr.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequestResponse } from '../models';
// @ts-ignore
import { BankAccountRequest } from '../models';
// @ts-ignore
import { CreateEmployeeRequest } from '../models';
// @ts-ignore
import { EmployeeGetOneResponseMapped } from '../models';
// @ts-ignore
import { EmployeeListManyEmployeesFiltersParameter } from '../models';
// @ts-ignore
import { EmployeeListManyEmployeesSortParameter } from '../models';
// @ts-ignore
import { EmployeeResponseMapped } from '../models';
// @ts-ignore
import { EmployeeTaxRequest } from '../models';
// @ts-ignore
import { EmployeesGetManyResponseMapped } from '../models';
// @ts-ignore
import { EmptyResponseMapped } from '../models';
// @ts-ignore
import { ForbiddenResponse } from '../models';
// @ts-ignore
import { HomeAddressRequest } from '../models';
// @ts-ignore
import { InternalServerErrorResponse } from '../models';
// @ts-ignore
import { NotFoundResponse } from '../models';
// @ts-ignore
import { UnauthorizedResponse } from '../models';
// @ts-ignore
import { UpdateEmployeeRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmployeeApi - axios parameter creator
 * @export
 */
export const EmployeeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create One Employee
         * @summary Create One Employee
         * @param {CreateEmployeeRequest} createEmployeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneEmployee: async (createEmployeeRequest: CreateEmployeeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createEmployeeRequest' is not null or undefined
            assertParamExists('createOneEmployee', 'createEmployeeRequest', createEmployeeRequest)
            const localVarPath = `/employee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createEmployeeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/employee',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createEmployeeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get One Employee
         * @summary Get One Employee
         * @param {string} id Resource Id
         * @param {Array<'id' | 'title' | 'active' | 'companyId' | 'officeId' | 'managerEmployeeId' | 'departmentId' | 'costCenterId' | 'employmentId' | 'employmentTypeId' | 'employmentCountry' | 'compensationId' | 'userId' | 'userName' | 'division' | 'organization' | 'employeeNumber' | 'workEmail' | 'workPhone' | 'workPhoneSanitized' | 'hireDate' | 'endDate' | 'hasOccupationalPension' | 'privateEmail' | 'firstName' | 'lastName' | 'ssn' | 'privatePhone' | 'privatePhoneSanitized' | 'birthDate' | 'age' | 'nationality' | 'gender' | 'pronoun' | 'created' | 'updated'>} [select] Select Employee fields, comma-separated. (e.g. &#x60;select&#x3D;id,firstName,lastName,workEmail&#x60;)
         * @param {Array<'office' | 'costCenter' | 'effectiveCostCenter' | 'child' | 'department' | 'emergencyContact' | 'employment' | 'employmentType' | 'compensation' | 'managerEmployee' | 'teamReference'>} [relations] Select related Employee resources, comma-separated. (e.g. &#x60;relations&#x3D;office,department&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOne: async (id: string, select?: Array<'id' | 'title' | 'active' | 'companyId' | 'officeId' | 'managerEmployeeId' | 'departmentId' | 'costCenterId' | 'employmentId' | 'employmentTypeId' | 'employmentCountry' | 'compensationId' | 'userId' | 'userName' | 'division' | 'organization' | 'employeeNumber' | 'workEmail' | 'workPhone' | 'workPhoneSanitized' | 'hireDate' | 'endDate' | 'hasOccupationalPension' | 'privateEmail' | 'firstName' | 'lastName' | 'ssn' | 'privatePhone' | 'privatePhoneSanitized' | 'birthDate' | 'age' | 'nationality' | 'gender' | 'pronoun' | 'created' | 'updated'>, relations?: Array<'office' | 'costCenter' | 'effectiveCostCenter' | 'child' | 'department' | 'emergencyContact' | 'employment' | 'employmentType' | 'compensation' | 'managerEmployee' | 'teamReference'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOne', 'id', id)
            const localVarPath = `/employee/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (select) {
                localVarQueryParameter['select'] = select.join(COLLECTION_FORMATS.csv);
            }

            if (relations) {
                localVarQueryParameter['relations'] = relations.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/employee/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Many Employees
         * @summary Get Many Employees
         * @param {Array<'id' | 'title' | 'active' | 'companyId' | 'officeId' | 'managerEmployeeId' | 'departmentId' | 'costCenterId' | 'employmentId' | 'employmentTypeId' | 'employmentCountry' | 'compensationId' | 'userId' | 'userName' | 'division' | 'organization' | 'employeeNumber' | 'workEmail' | 'workPhone' | 'workPhoneSanitized' | 'hireDate' | 'endDate' | 'hasOccupationalPension' | 'privateEmail' | 'firstName' | 'lastName' | 'ssn' | 'privatePhone' | 'privatePhoneSanitized' | 'birthDate' | 'age' | 'nationality' | 'gender' | 'pronoun' | 'created' | 'updated'>} [select] Select Employee fields, comma-separated. (e.g. &#x60;select&#x3D;id,firstName,lastName,workEmail&#x60;)
         * @param {Array<'office' | 'costCenter' | 'effectiveCostCenter' | 'child' | 'department' | 'emergencyContact' | 'employment' | 'employmentType' | 'compensation' | 'managerEmployee' | 'teamReference'>} [relations] Select related Employee resources, comma-separated. (e.g. &#x60;relations&#x3D;office,department&#x60;)
         * @param {EmployeeListManyEmployeesFiltersParameter} [filters] Filters conditions per field. (e.g. &#x60;filters[id][$eq]&#x3D;507f1f77bcf86cd799439011&#x60;)
         * @param {number} [limit] Limit amount of received Employees. (e.g. &#x60;limit&#x3D;20&#x60;)
         * @param {number} [offset] Offset amount of received Employees. (e.g. &#x60;offset&#x3D;20&#x60;)
         * @param {EmployeeListManyEmployeesSortParameter} [sort] Sort received Employees by field. (e.g. &#x60;sort[id]&#x3D;asc&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listManyEmployees: async (select?: Array<'id' | 'title' | 'active' | 'companyId' | 'officeId' | 'managerEmployeeId' | 'departmentId' | 'costCenterId' | 'employmentId' | 'employmentTypeId' | 'employmentCountry' | 'compensationId' | 'userId' | 'userName' | 'division' | 'organization' | 'employeeNumber' | 'workEmail' | 'workPhone' | 'workPhoneSanitized' | 'hireDate' | 'endDate' | 'hasOccupationalPension' | 'privateEmail' | 'firstName' | 'lastName' | 'ssn' | 'privatePhone' | 'privatePhoneSanitized' | 'birthDate' | 'age' | 'nationality' | 'gender' | 'pronoun' | 'created' | 'updated'>, relations?: Array<'office' | 'costCenter' | 'effectiveCostCenter' | 'child' | 'department' | 'emergencyContact' | 'employment' | 'employmentType' | 'compensation' | 'managerEmployee' | 'teamReference'>, filters?: EmployeeListManyEmployeesFiltersParameter, limit?: number, offset?: number, sort?: EmployeeListManyEmployeesSortParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/employee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (select) {
                localVarQueryParameter['select'] = select.join(COLLECTION_FORMATS.csv);
            }

            if (relations) {
                localVarQueryParameter['relations'] = relations.join(COLLECTION_FORMATS.csv);
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/employee',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete One Employee
         * @summary Delete One Employee
         * @param {string} id Resource Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEmployee: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeEmployee', 'id', id)
            const localVarPath = `/employee/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/employee/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replace One Employee
         * @summary Replace One Employee
         * @param {string} id Resource Id
         * @param {UpdateEmployeeRequest} updateEmployeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceOneEmployee: async (id: string, updateEmployeeRequest: UpdateEmployeeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('replaceOneEmployee', 'id', id)
            // verify required parameter 'updateEmployeeRequest' is not null or undefined
            assertParamExists('replaceOneEmployee', 'updateEmployeeRequest', updateEmployeeRequest)
            const localVarPath = `/employee/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateEmployeeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/employee/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateEmployeeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update One Employee
         * @summary Update One Employee
         * @param {string} id Resource Id
         * @param {UpdateEmployeeRequest} updateEmployeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOne: async (id: string, updateEmployeeRequest: UpdateEmployeeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateOne', 'id', id)
            // verify required parameter 'updateEmployeeRequest' is not null or undefined
            assertParamExists('updateOne', 'updateEmployeeRequest', updateEmployeeRequest)
            const localVarPath = `/employee/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateEmployeeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/employee/{id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateEmployeeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeApi - functional programming interface
 * @export
 */
export const EmployeeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeApiAxiosParamCreator(configuration)
    return {
        /**
         * Create One Employee
         * @summary Create One Employee
         * @param {EmployeeApiCreateOneEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOneEmployee(requestParameters: EmployeeApiCreateOneEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeResponseMapped>> {
            const createEmployeeRequest: CreateEmployeeRequest = {
                title: requestParameters.title,
                officeId: requestParameters.officeId,
                managerEmployeeId: requestParameters.managerEmployeeId,
                departmentId: requestParameters.departmentId,
                costCenterId: requestParameters.costCenterId,
                userName: requestParameters.userName,
                division: requestParameters.division,
                organization: requestParameters.organization,
                employeeNumber: requestParameters.employeeNumber,
                tax: requestParameters.tax,
                workEmail: requestParameters.workEmail,
                workPhone: requestParameters.workPhone,
                hasOccupationalPension: requestParameters.hasOccupationalPension,
                privateEmail: requestParameters.privateEmail,
                firstName: requestParameters.firstName,
                lastName: requestParameters.lastName,
                ssn: requestParameters.ssn,
                privatePhone: requestParameters.privatePhone,
                birthDate: requestParameters.birthDate,
                avatarUrl: requestParameters.avatarUrl,
                nationality: requestParameters.nationality,
                gender: requestParameters.gender,
                pronoun: requestParameters.pronoun,
                bankAccount: requestParameters.bankAccount,
                homeAddress: requestParameters.homeAddress,
                custom: requestParameters.custom
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOneEmployee(createEmployeeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get One Employee
         * @summary Get One Employee
         * @param {EmployeeApiGetOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOne(requestParameters: EmployeeApiGetOneRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeGetOneResponseMapped>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOne(requestParameters.id, requestParameters.select, requestParameters.relations, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Many Employees
         * @summary Get Many Employees
         * @param {EmployeeApiListManyEmployeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listManyEmployees(requestParameters: EmployeeApiListManyEmployeesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeesGetManyResponseMapped>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listManyEmployees(requestParameters.select, requestParameters.relations, requestParameters.filters, requestParameters.limit, requestParameters.offset, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete One Employee
         * @summary Delete One Employee
         * @param {EmployeeApiRemoveEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeEmployee(requestParameters: EmployeeApiRemoveEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmptyResponseMapped>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeEmployee(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replace One Employee
         * @summary Replace One Employee
         * @param {EmployeeApiReplaceOneEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceOneEmployee(requestParameters: EmployeeApiReplaceOneEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeResponseMapped>> {
            const updateEmployeeRequest: UpdateEmployeeRequest = {
                title: requestParameters.title,
                officeId: requestParameters.officeId,
                managerEmployeeId: requestParameters.managerEmployeeId,
                departmentId: requestParameters.departmentId,
                costCenterId: requestParameters.costCenterId,
                userName: requestParameters.userName,
                division: requestParameters.division,
                organization: requestParameters.organization,
                employeeNumber: requestParameters.employeeNumber,
                tax: requestParameters.tax,
                workEmail: requestParameters.workEmail,
                workPhone: requestParameters.workPhone,
                hasOccupationalPension: requestParameters.hasOccupationalPension,
                privateEmail: requestParameters.privateEmail,
                firstName: requestParameters.firstName,
                lastName: requestParameters.lastName,
                ssn: requestParameters.ssn,
                privatePhone: requestParameters.privatePhone,
                birthDate: requestParameters.birthDate,
                avatarUrl: requestParameters.avatarUrl,
                nationality: requestParameters.nationality,
                gender: requestParameters.gender,
                pronoun: requestParameters.pronoun,
                bankAccount: requestParameters.bankAccount,
                homeAddress: requestParameters.homeAddress,
                custom: requestParameters.custom,
                active: requestParameters.active
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceOneEmployee(requestParameters.id, updateEmployeeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update One Employee
         * @summary Update One Employee
         * @param {EmployeeApiUpdateOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOne(requestParameters: EmployeeApiUpdateOneRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeResponseMapped>> {
            const updateEmployeeRequest: UpdateEmployeeRequest = {
                title: requestParameters.title,
                officeId: requestParameters.officeId,
                managerEmployeeId: requestParameters.managerEmployeeId,
                departmentId: requestParameters.departmentId,
                costCenterId: requestParameters.costCenterId,
                userName: requestParameters.userName,
                division: requestParameters.division,
                organization: requestParameters.organization,
                employeeNumber: requestParameters.employeeNumber,
                tax: requestParameters.tax,
                workEmail: requestParameters.workEmail,
                workPhone: requestParameters.workPhone,
                hasOccupationalPension: requestParameters.hasOccupationalPension,
                privateEmail: requestParameters.privateEmail,
                firstName: requestParameters.firstName,
                lastName: requestParameters.lastName,
                ssn: requestParameters.ssn,
                privatePhone: requestParameters.privatePhone,
                birthDate: requestParameters.birthDate,
                avatarUrl: requestParameters.avatarUrl,
                nationality: requestParameters.nationality,
                gender: requestParameters.gender,
                pronoun: requestParameters.pronoun,
                bankAccount: requestParameters.bankAccount,
                homeAddress: requestParameters.homeAddress,
                custom: requestParameters.custom,
                active: requestParameters.active
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOne(requestParameters.id, updateEmployeeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeeApi - factory interface
 * @export
 */
export const EmployeeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeApiFp(configuration)
    return {
        /**
         * Create One Employee
         * @summary Create One Employee
         * @param {EmployeeApiCreateOneEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneEmployee(requestParameters: EmployeeApiCreateOneEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeResponseMapped> {
            return localVarFp.createOneEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get One Employee
         * @summary Get One Employee
         * @param {EmployeeApiGetOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOne(requestParameters: EmployeeApiGetOneRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeGetOneResponseMapped> {
            return localVarFp.getOne(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Many Employees
         * @summary Get Many Employees
         * @param {EmployeeApiListManyEmployeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listManyEmployees(requestParameters: EmployeeApiListManyEmployeesRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeesGetManyResponseMapped> {
            return localVarFp.listManyEmployees(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete One Employee
         * @summary Delete One Employee
         * @param {EmployeeApiRemoveEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEmployee(requestParameters: EmployeeApiRemoveEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<EmptyResponseMapped> {
            return localVarFp.removeEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace One Employee
         * @summary Replace One Employee
         * @param {EmployeeApiReplaceOneEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceOneEmployee(requestParameters: EmployeeApiReplaceOneEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeResponseMapped> {
            return localVarFp.replaceOneEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update One Employee
         * @summary Update One Employee
         * @param {EmployeeApiUpdateOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOne(requestParameters: EmployeeApiUpdateOneRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeResponseMapped> {
            return localVarFp.updateOne(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createOneEmployee operation in EmployeeApi.
 * @export
 * @interface EmployeeApiCreateOneEmployeeRequest
 */
export type EmployeeApiCreateOneEmployeeRequest = {
    
} & CreateEmployeeRequest

/**
 * Request parameters for getOne operation in EmployeeApi.
 * @export
 * @interface EmployeeApiGetOneRequest
 */
export type EmployeeApiGetOneRequest = {
    
    /**
    * Resource Id
    * @type {string}
    * @memberof EmployeeApiGetOne
    */
    readonly id: string
    
    /**
    * Select Employee fields, comma-separated. (e.g. `select=id,firstName,lastName,workEmail`)
    * @type {Array<'id' | 'title' | 'active' | 'companyId' | 'officeId' | 'managerEmployeeId' | 'departmentId' | 'costCenterId' | 'employmentId' | 'employmentTypeId' | 'employmentCountry' | 'compensationId' | 'userId' | 'userName' | 'division' | 'organization' | 'employeeNumber' | 'workEmail' | 'workPhone' | 'workPhoneSanitized' | 'hireDate' | 'endDate' | 'hasOccupationalPension' | 'privateEmail' | 'firstName' | 'lastName' | 'ssn' | 'privatePhone' | 'privatePhoneSanitized' | 'birthDate' | 'age' | 'nationality' | 'gender' | 'pronoun' | 'created' | 'updated'>}
    * @memberof EmployeeApiGetOne
    */
    readonly select?: Array<'id' | 'title' | 'active' | 'companyId' | 'officeId' | 'managerEmployeeId' | 'departmentId' | 'costCenterId' | 'employmentId' | 'employmentTypeId' | 'employmentCountry' | 'compensationId' | 'userId' | 'userName' | 'division' | 'organization' | 'employeeNumber' | 'workEmail' | 'workPhone' | 'workPhoneSanitized' | 'hireDate' | 'endDate' | 'hasOccupationalPension' | 'privateEmail' | 'firstName' | 'lastName' | 'ssn' | 'privatePhone' | 'privatePhoneSanitized' | 'birthDate' | 'age' | 'nationality' | 'gender' | 'pronoun' | 'created' | 'updated'>
    
    /**
    * Select related Employee resources, comma-separated. (e.g. `relations=office,department`)
    * @type {Array<'office' | 'costCenter' | 'effectiveCostCenter' | 'child' | 'department' | 'emergencyContact' | 'employment' | 'employmentType' | 'compensation' | 'managerEmployee' | 'teamReference'>}
    * @memberof EmployeeApiGetOne
    */
    readonly relations?: Array<'office' | 'costCenter' | 'effectiveCostCenter' | 'child' | 'department' | 'emergencyContact' | 'employment' | 'employmentType' | 'compensation' | 'managerEmployee' | 'teamReference'>
    
}

/**
 * Request parameters for listManyEmployees operation in EmployeeApi.
 * @export
 * @interface EmployeeApiListManyEmployeesRequest
 */
export type EmployeeApiListManyEmployeesRequest = {
    
    /**
    * Select Employee fields, comma-separated. (e.g. `select=id,firstName,lastName,workEmail`)
    * @type {Array<'id' | 'title' | 'active' | 'companyId' | 'officeId' | 'managerEmployeeId' | 'departmentId' | 'costCenterId' | 'employmentId' | 'employmentTypeId' | 'employmentCountry' | 'compensationId' | 'userId' | 'userName' | 'division' | 'organization' | 'employeeNumber' | 'workEmail' | 'workPhone' | 'workPhoneSanitized' | 'hireDate' | 'endDate' | 'hasOccupationalPension' | 'privateEmail' | 'firstName' | 'lastName' | 'ssn' | 'privatePhone' | 'privatePhoneSanitized' | 'birthDate' | 'age' | 'nationality' | 'gender' | 'pronoun' | 'created' | 'updated'>}
    * @memberof EmployeeApiListManyEmployees
    */
    readonly select?: Array<'id' | 'title' | 'active' | 'companyId' | 'officeId' | 'managerEmployeeId' | 'departmentId' | 'costCenterId' | 'employmentId' | 'employmentTypeId' | 'employmentCountry' | 'compensationId' | 'userId' | 'userName' | 'division' | 'organization' | 'employeeNumber' | 'workEmail' | 'workPhone' | 'workPhoneSanitized' | 'hireDate' | 'endDate' | 'hasOccupationalPension' | 'privateEmail' | 'firstName' | 'lastName' | 'ssn' | 'privatePhone' | 'privatePhoneSanitized' | 'birthDate' | 'age' | 'nationality' | 'gender' | 'pronoun' | 'created' | 'updated'>
    
    /**
    * Select related Employee resources, comma-separated. (e.g. `relations=office,department`)
    * @type {Array<'office' | 'costCenter' | 'effectiveCostCenter' | 'child' | 'department' | 'emergencyContact' | 'employment' | 'employmentType' | 'compensation' | 'managerEmployee' | 'teamReference'>}
    * @memberof EmployeeApiListManyEmployees
    */
    readonly relations?: Array<'office' | 'costCenter' | 'effectiveCostCenter' | 'child' | 'department' | 'emergencyContact' | 'employment' | 'employmentType' | 'compensation' | 'managerEmployee' | 'teamReference'>
    
    /**
    * Filters conditions per field. (e.g. `filters[id][$eq]=507f1f77bcf86cd799439011`)
    * @type {EmployeeListManyEmployeesFiltersParameter}
    * @memberof EmployeeApiListManyEmployees
    */
    readonly filters?: EmployeeListManyEmployeesFiltersParameter
    
    /**
    * Limit amount of received Employees. (e.g. `limit=20`)
    * @type {number}
    * @memberof EmployeeApiListManyEmployees
    */
    readonly limit?: number
    
    /**
    * Offset amount of received Employees. (e.g. `offset=20`)
    * @type {number}
    * @memberof EmployeeApiListManyEmployees
    */
    readonly offset?: number
    
    /**
    * Sort received Employees by field. (e.g. `sort[id]=asc`)
    * @type {EmployeeListManyEmployeesSortParameter}
    * @memberof EmployeeApiListManyEmployees
    */
    readonly sort?: EmployeeListManyEmployeesSortParameter
    
}

/**
 * Request parameters for removeEmployee operation in EmployeeApi.
 * @export
 * @interface EmployeeApiRemoveEmployeeRequest
 */
export type EmployeeApiRemoveEmployeeRequest = {
    
    /**
    * Resource Id
    * @type {string}
    * @memberof EmployeeApiRemoveEmployee
    */
    readonly id: string
    
}

/**
 * Request parameters for replaceOneEmployee operation in EmployeeApi.
 * @export
 * @interface EmployeeApiReplaceOneEmployeeRequest
 */
export type EmployeeApiReplaceOneEmployeeRequest = {
    
    /**
    * Resource Id
    * @type {string}
    * @memberof EmployeeApiReplaceOneEmployee
    */
    readonly id: string
    
} & UpdateEmployeeRequest

/**
 * Request parameters for updateOne operation in EmployeeApi.
 * @export
 * @interface EmployeeApiUpdateOneRequest
 */
export type EmployeeApiUpdateOneRequest = {
    
    /**
    * Resource Id
    * @type {string}
    * @memberof EmployeeApiUpdateOne
    */
    readonly id: string
    
} & UpdateEmployeeRequest

/**
 * EmployeeApiGenerated - object-oriented interface
 * @export
 * @class EmployeeApiGenerated
 * @extends {BaseAPI}
 */
export class EmployeeApiGenerated extends BaseAPI {
    /**
     * Create One Employee
     * @summary Create One Employee
     * @param {EmployeeApiCreateOneEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApiGenerated
     */
    public createOneEmployee(requestParameters: EmployeeApiCreateOneEmployeeRequest, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).createOneEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get One Employee
     * @summary Get One Employee
     * @param {EmployeeApiGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApiGenerated
     */
    public getOne(requestParameters: EmployeeApiGetOneRequest, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).getOne(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Many Employees
     * @summary Get Many Employees
     * @param {EmployeeApiListManyEmployeesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApiGenerated
     */
    public listManyEmployees(requestParameters: EmployeeApiListManyEmployeesRequest, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).listManyEmployees(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete One Employee
     * @summary Delete One Employee
     * @param {EmployeeApiRemoveEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApiGenerated
     */
    public removeEmployee(requestParameters: EmployeeApiRemoveEmployeeRequest, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).removeEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replace One Employee
     * @summary Replace One Employee
     * @param {EmployeeApiReplaceOneEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApiGenerated
     */
    public replaceOneEmployee(requestParameters: EmployeeApiReplaceOneEmployeeRequest, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).replaceOneEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update One Employee
     * @summary Update One Employee
     * @param {EmployeeApiUpdateOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApiGenerated
     */
    public updateOne(requestParameters: EmployeeApiUpdateOneRequest, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).updateOne(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
