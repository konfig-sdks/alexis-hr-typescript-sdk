/* tslint:disable */
/* eslint-disable */
/*
AlexisHR API

<h1 id=\"introduction\">Introduction</h1>
<p>
  AlexisHR API is currently in preview. This means that small, backward
  incompatible changes might be introduced while in preview. The changes will be
  documented and communicated.
  <a
    href=\"https://cdn.forms-content.sg-form.com/56c6a65c-90a2-11eb-a700-a6de1aea3a1a\"
    target=\"_blank\"
    ><button>Subscribe to updates</button></a
  >
</p>

<h1 id=\"authentication\">Authentication</h1>
<pre class=\"click-to-expand-wrapper is-snippet-wrapper language-undefined\">
<code class=\"is-highlighted language-bash\">curl https://api.alexishr.com/v1/employee \\
  -H \"Authorization: Bearer &lt;your_access_token&gt;\"</code>
</pre>
<p>
  Authenticate your account when using the API by including your secret Access
  Token in the request.
  <a href=\"https://app.alexishr.com/access-tokens\">Manage your Access Tokens</a
  >.
</p>
<p>
  Authentication is performed by passing the Access Token in the Authorization
  header.
</p>
<hr />

<h1 id=\"structure\">Structure</h1>
<p>
  You will find the structure of the API to be highly uniform and consistent.
  Typically every resource can be accessed via a top level endpoint, such as
  <code>/v1/employee</code>. For every such resource, you can perform some of
  the following operations:
</p>
<h2>Operations</h2>
<table>
  <tr>
    <td>GET /v1/:resource</td>
    <td>List all objects of this type</td>
  </tr>
  <tr>
    <td>GET /v1/:resource/:id</td>
    <td>Retrieve a resource by id</td>
  </tr>
  <tr>
    <td>POST /v1/:resource</td>
    <td>Create a resource of this type</td>
  </tr>
  <tr>
    <td>PATCH /v1/:resource/:id</td>
    <td>Update the resource by id</td>
  </tr>
  <tr>
    <td>DELETE /v1/:resource/:id</td>
    <td>Delete the resource by id</td>
  </tr>
</table>
<hr />

<h1 id=\"roles\">Roles</h1>
<p>The Access Tokens will have owner permission on the account</p>
<hr />

<h1 id=\"filters\">Filters</h1>
<p>
  Some of the list endpoints allow to filter results by certain conditions.
  Refer to specific resources to find out what criteria are allowed. Below is a
  list of the different conditions.
</p>

<h4 id=\"eq\"><code>$eq</code></h4>
<p>Find all results matching the attribute value specified.</p>
<div>
  <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$eq]=value</code></pre>
</div>
<p>Can also be simplified like this.</p>
<div>
  <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName]=value</code></pre>
</div>

<h4 id=\"neq\"><code>$neq</code></h4>
<p>Find all results not matching the attribute value specified.</p>
<div>
  <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$neq]=value</code></pre>
</div>

<h4 id=\"gt\"><code>$gt</code>, <code>$gte</code></h4>
<p>
  Find all results where the value is more (<code>$gt</code>) or more and equal
  (<code>$gte</code>) to a given value.
</p>
<div>
  <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$gte]=2020-01-01</code></pre>
</div>
<hr />

<h4 id=\"lt\"><code>$lt</code>, <code>$lte</code></h4>
<p>
  Find all results where the value is less (<code>$lt</code>) or less and equal
  (<code>$lte</code>) to a given value.
</p>
<div>
  <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$lte]=2020-01-01</code></pre>
</div>
<hr />

<h4 id=\"in\"><code>$in</code>, <code>$nin</code></h4>
<p>
  Find all results matching (<code>$in</code>) or not matching
  (<code>$nin</code>) any of the attribute values specified.
</p>
<div>
  <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$in][]=value1&filters[fieldName][$in][]=value2</code></pre>
</div>
<hr />

<h4 id=\"between\"><code>$between</code></h4>
<p>Find all results between two values specified.</p>
<div>
  <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$between][]=2020-01-01&filters[startDate][$between][]=2020-12-31</code></pre>
</div>
<hr />

<h1 id=\"versioning\">Versioning</h1>
<p>
  Each version of the API is guaranteed to be compatible with the resources of
  the same version. When we make breaking changes to the API a new version will
  be published
</p>
<hr />

<h1 id=\"changelog\">Changelog</h1>
<h3>2023-12-20</h3>
<p>Field [updated] added for filter & select for Get Many Employments and Get Many Employees.</p>
<h3>2021-03-15</h3>
<p>First draft was published</p>
<hr />

# Authentication

<!-- ReDoc-Inject: <security-definitions> -->

The version of the OpenAPI document: v1-preview
Contact: support@alexishr.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequestResponse } from '../models';
// @ts-ignore
import { CreateLeaveTypeRequest } from '../models';
// @ts-ignore
import { EmptyResponseMapped } from '../models';
// @ts-ignore
import { ForbiddenResponse } from '../models';
// @ts-ignore
import { InternalServerErrorResponse } from '../models';
// @ts-ignore
import { LeaveTypeGetOneResponseMapped } from '../models';
// @ts-ignore
import { LeaveTypeResponseMapped } from '../models';
// @ts-ignore
import { LeaveTypesGetManyResponseMapped } from '../models';
// @ts-ignore
import { LeavetypeGetManyLeaveTypesFiltersParameter } from '../models';
// @ts-ignore
import { LeavetypeGetManyLeaveTypesSortParameter } from '../models';
// @ts-ignore
import { NotFoundResponse } from '../models';
// @ts-ignore
import { UnauthorizedResponse } from '../models';
// @ts-ignore
import { UpdateLeaveTypeRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LeaveTypeApi - axios parameter creator
 * @export
 */
export const LeaveTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create One LeaveType
         * @summary Create One LeaveType
         * @param {CreateLeaveTypeRequest} createLeaveTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneLeaveType: async (createLeaveTypeRequest: CreateLeaveTypeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createLeaveTypeRequest' is not null or undefined
            assertParamExists('createOneLeaveType', 'createLeaveTypeRequest', createLeaveTypeRequest)
            const localVarPath = `/leave-type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createLeaveTypeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/leave-type',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createLeaveTypeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete One LeaveType
         * @summary Delete One LeaveType
         * @param {string} id Resource Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOneLeaveType: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteOneLeaveType', 'id', id)
            const localVarPath = `/leave-type/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/leave-type/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Many LeaveTypes
         * @summary Get Many LeaveTypes
         * @param {Array<'id' | 'name' | 'kind' | 'minimumDuration' | 'deductible' | 'paid' | 'disabled' | 'archived'>} [select] Select LeaveType fields, comma-separated. (e.g. &#x60;select&#x3D;id,firstName,lastName,workEmail&#x60;)
         * @param {Array<'leaveTypeCode'>} [relations] Select related LeaveType resources, comma-separated. (e.g. &#x60;relations&#x3D;office,department&#x60;)
         * @param {LeavetypeGetManyLeaveTypesFiltersParameter} [filters] Filters conditions per field. (e.g. &#x60;filters[id][$eq]&#x3D;507f1f77bcf86cd799439011&#x60;)
         * @param {number} [limit] Limit amount of received LeaveTypes. (e.g. &#x60;limit&#x3D;20&#x60;)
         * @param {number} [offset] Offset amount of received LeaveTypes. (e.g. &#x60;offset&#x3D;20&#x60;)
         * @param {LeavetypeGetManyLeaveTypesSortParameter} [sort] Sort received LeaveTypes by field. (e.g. &#x60;sort[id]&#x3D;asc&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManyLeaveTypes: async (select?: Array<'id' | 'name' | 'kind' | 'minimumDuration' | 'deductible' | 'paid' | 'disabled' | 'archived'>, relations?: Array<'leaveTypeCode'>, filters?: LeavetypeGetManyLeaveTypesFiltersParameter, limit?: number, offset?: number, sort?: LeavetypeGetManyLeaveTypesSortParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/leave-type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (select) {
                localVarQueryParameter['select'] = select.join(COLLECTION_FORMATS.csv);
            }

            if (relations) {
                localVarQueryParameter['relations'] = relations.join(COLLECTION_FORMATS.csv);
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/leave-type',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get One LeaveType
         * @summary Get One LeaveType
         * @param {string} id Resource Id
         * @param {Array<'id' | 'name' | 'kind' | 'minimumDuration' | 'deductible' | 'paid' | 'disabled' | 'archived'>} [select] Select LeaveType fields, comma-separated. (e.g. &#x60;select&#x3D;id,firstName,lastName,workEmail&#x60;)
         * @param {Array<'leaveTypeCode'>} [relations] Select related LeaveType resources, comma-separated. (e.g. &#x60;relations&#x3D;office,department&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneLeaveType: async (id: string, select?: Array<'id' | 'name' | 'kind' | 'minimumDuration' | 'deductible' | 'paid' | 'disabled' | 'archived'>, relations?: Array<'leaveTypeCode'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOneLeaveType', 'id', id)
            const localVarPath = `/leave-type/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (select) {
                localVarQueryParameter['select'] = select.join(COLLECTION_FORMATS.csv);
            }

            if (relations) {
                localVarQueryParameter['relations'] = relations.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/leave-type/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replace One LeaveType
         * @summary Replace One LeaveType
         * @param {string} id Resource Id
         * @param {UpdateLeaveTypeRequest} updateLeaveTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceLeaveType: async (id: string, updateLeaveTypeRequest: UpdateLeaveTypeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('replaceLeaveType', 'id', id)
            // verify required parameter 'updateLeaveTypeRequest' is not null or undefined
            assertParamExists('replaceLeaveType', 'updateLeaveTypeRequest', updateLeaveTypeRequest)
            const localVarPath = `/leave-type/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateLeaveTypeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/leave-type/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateLeaveTypeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update One LeaveType
         * @summary Update One LeaveType
         * @param {string} id Resource Id
         * @param {UpdateLeaveTypeRequest} updateLeaveTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOneLeaveType: async (id: string, updateLeaveTypeRequest: UpdateLeaveTypeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateOneLeaveType', 'id', id)
            // verify required parameter 'updateLeaveTypeRequest' is not null or undefined
            assertParamExists('updateOneLeaveType', 'updateLeaveTypeRequest', updateLeaveTypeRequest)
            const localVarPath = `/leave-type/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateLeaveTypeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/leave-type/{id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateLeaveTypeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LeaveTypeApi - functional programming interface
 * @export
 */
export const LeaveTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LeaveTypeApiAxiosParamCreator(configuration)
    return {
        /**
         * Create One LeaveType
         * @summary Create One LeaveType
         * @param {LeaveTypeApiCreateOneLeaveTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOneLeaveType(requestParameters: LeaveTypeApiCreateOneLeaveTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeaveTypeResponseMapped>> {
            const createLeaveTypeRequest: CreateLeaveTypeRequest = {
                name: requestParameters.name,
                kind: requestParameters.kind,
                minimumDuration: requestParameters.minimumDuration,
                deductible: requestParameters.deductible,
                paid: requestParameters.paid,
                disabled: requestParameters.disabled,
                archived: requestParameters.archived
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOneLeaveType(createLeaveTypeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete One LeaveType
         * @summary Delete One LeaveType
         * @param {LeaveTypeApiDeleteOneLeaveTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOneLeaveType(requestParameters: LeaveTypeApiDeleteOneLeaveTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmptyResponseMapped>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOneLeaveType(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Many LeaveTypes
         * @summary Get Many LeaveTypes
         * @param {LeaveTypeApiGetManyLeaveTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getManyLeaveTypes(requestParameters: LeaveTypeApiGetManyLeaveTypesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeaveTypesGetManyResponseMapped>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getManyLeaveTypes(requestParameters.select, requestParameters.relations, requestParameters.filters, requestParameters.limit, requestParameters.offset, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get One LeaveType
         * @summary Get One LeaveType
         * @param {LeaveTypeApiGetOneLeaveTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOneLeaveType(requestParameters: LeaveTypeApiGetOneLeaveTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeaveTypeGetOneResponseMapped>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOneLeaveType(requestParameters.id, requestParameters.select, requestParameters.relations, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replace One LeaveType
         * @summary Replace One LeaveType
         * @param {LeaveTypeApiReplaceLeaveTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceLeaveType(requestParameters: LeaveTypeApiReplaceLeaveTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeaveTypeResponseMapped>> {
            const updateLeaveTypeRequest: UpdateLeaveTypeRequest = {
                name: requestParameters.name,
                kind: requestParameters.kind,
                minimumDuration: requestParameters.minimumDuration,
                deductible: requestParameters.deductible,
                paid: requestParameters.paid,
                disabled: requestParameters.disabled,
                archived: requestParameters.archived
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceLeaveType(requestParameters.id, updateLeaveTypeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update One LeaveType
         * @summary Update One LeaveType
         * @param {LeaveTypeApiUpdateOneLeaveTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOneLeaveType(requestParameters: LeaveTypeApiUpdateOneLeaveTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeaveTypeResponseMapped>> {
            const updateLeaveTypeRequest: UpdateLeaveTypeRequest = {
                name: requestParameters.name,
                kind: requestParameters.kind,
                minimumDuration: requestParameters.minimumDuration,
                deductible: requestParameters.deductible,
                paid: requestParameters.paid,
                disabled: requestParameters.disabled,
                archived: requestParameters.archived
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOneLeaveType(requestParameters.id, updateLeaveTypeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LeaveTypeApi - factory interface
 * @export
 */
export const LeaveTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LeaveTypeApiFp(configuration)
    return {
        /**
         * Create One LeaveType
         * @summary Create One LeaveType
         * @param {LeaveTypeApiCreateOneLeaveTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneLeaveType(requestParameters: LeaveTypeApiCreateOneLeaveTypeRequest, options?: AxiosRequestConfig): AxiosPromise<LeaveTypeResponseMapped> {
            return localVarFp.createOneLeaveType(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete One LeaveType
         * @summary Delete One LeaveType
         * @param {LeaveTypeApiDeleteOneLeaveTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOneLeaveType(requestParameters: LeaveTypeApiDeleteOneLeaveTypeRequest, options?: AxiosRequestConfig): AxiosPromise<EmptyResponseMapped> {
            return localVarFp.deleteOneLeaveType(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Many LeaveTypes
         * @summary Get Many LeaveTypes
         * @param {LeaveTypeApiGetManyLeaveTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManyLeaveTypes(requestParameters: LeaveTypeApiGetManyLeaveTypesRequest, options?: AxiosRequestConfig): AxiosPromise<LeaveTypesGetManyResponseMapped> {
            return localVarFp.getManyLeaveTypes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get One LeaveType
         * @summary Get One LeaveType
         * @param {LeaveTypeApiGetOneLeaveTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneLeaveType(requestParameters: LeaveTypeApiGetOneLeaveTypeRequest, options?: AxiosRequestConfig): AxiosPromise<LeaveTypeGetOneResponseMapped> {
            return localVarFp.getOneLeaveType(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace One LeaveType
         * @summary Replace One LeaveType
         * @param {LeaveTypeApiReplaceLeaveTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceLeaveType(requestParameters: LeaveTypeApiReplaceLeaveTypeRequest, options?: AxiosRequestConfig): AxiosPromise<LeaveTypeResponseMapped> {
            return localVarFp.replaceLeaveType(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update One LeaveType
         * @summary Update One LeaveType
         * @param {LeaveTypeApiUpdateOneLeaveTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOneLeaveType(requestParameters: LeaveTypeApiUpdateOneLeaveTypeRequest, options?: AxiosRequestConfig): AxiosPromise<LeaveTypeResponseMapped> {
            return localVarFp.updateOneLeaveType(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createOneLeaveType operation in LeaveTypeApi.
 * @export
 * @interface LeaveTypeApiCreateOneLeaveTypeRequest
 */
export type LeaveTypeApiCreateOneLeaveTypeRequest = {
    
} & CreateLeaveTypeRequest

/**
 * Request parameters for deleteOneLeaveType operation in LeaveTypeApi.
 * @export
 * @interface LeaveTypeApiDeleteOneLeaveTypeRequest
 */
export type LeaveTypeApiDeleteOneLeaveTypeRequest = {
    
    /**
    * Resource Id
    * @type {string}
    * @memberof LeaveTypeApiDeleteOneLeaveType
    */
    readonly id: string
    
}

/**
 * Request parameters for getManyLeaveTypes operation in LeaveTypeApi.
 * @export
 * @interface LeaveTypeApiGetManyLeaveTypesRequest
 */
export type LeaveTypeApiGetManyLeaveTypesRequest = {
    
    /**
    * Select LeaveType fields, comma-separated. (e.g. `select=id,firstName,lastName,workEmail`)
    * @type {Array<'id' | 'name' | 'kind' | 'minimumDuration' | 'deductible' | 'paid' | 'disabled' | 'archived'>}
    * @memberof LeaveTypeApiGetManyLeaveTypes
    */
    readonly select?: Array<'id' | 'name' | 'kind' | 'minimumDuration' | 'deductible' | 'paid' | 'disabled' | 'archived'>
    
    /**
    * Select related LeaveType resources, comma-separated. (e.g. `relations=office,department`)
    * @type {Array<'leaveTypeCode'>}
    * @memberof LeaveTypeApiGetManyLeaveTypes
    */
    readonly relations?: Array<'leaveTypeCode'>
    
    /**
    * Filters conditions per field. (e.g. `filters[id][$eq]=507f1f77bcf86cd799439011`)
    * @type {LeavetypeGetManyLeaveTypesFiltersParameter}
    * @memberof LeaveTypeApiGetManyLeaveTypes
    */
    readonly filters?: LeavetypeGetManyLeaveTypesFiltersParameter
    
    /**
    * Limit amount of received LeaveTypes. (e.g. `limit=20`)
    * @type {number}
    * @memberof LeaveTypeApiGetManyLeaveTypes
    */
    readonly limit?: number
    
    /**
    * Offset amount of received LeaveTypes. (e.g. `offset=20`)
    * @type {number}
    * @memberof LeaveTypeApiGetManyLeaveTypes
    */
    readonly offset?: number
    
    /**
    * Sort received LeaveTypes by field. (e.g. `sort[id]=asc`)
    * @type {LeavetypeGetManyLeaveTypesSortParameter}
    * @memberof LeaveTypeApiGetManyLeaveTypes
    */
    readonly sort?: LeavetypeGetManyLeaveTypesSortParameter
    
}

/**
 * Request parameters for getOneLeaveType operation in LeaveTypeApi.
 * @export
 * @interface LeaveTypeApiGetOneLeaveTypeRequest
 */
export type LeaveTypeApiGetOneLeaveTypeRequest = {
    
    /**
    * Resource Id
    * @type {string}
    * @memberof LeaveTypeApiGetOneLeaveType
    */
    readonly id: string
    
    /**
    * Select LeaveType fields, comma-separated. (e.g. `select=id,firstName,lastName,workEmail`)
    * @type {Array<'id' | 'name' | 'kind' | 'minimumDuration' | 'deductible' | 'paid' | 'disabled' | 'archived'>}
    * @memberof LeaveTypeApiGetOneLeaveType
    */
    readonly select?: Array<'id' | 'name' | 'kind' | 'minimumDuration' | 'deductible' | 'paid' | 'disabled' | 'archived'>
    
    /**
    * Select related LeaveType resources, comma-separated. (e.g. `relations=office,department`)
    * @type {Array<'leaveTypeCode'>}
    * @memberof LeaveTypeApiGetOneLeaveType
    */
    readonly relations?: Array<'leaveTypeCode'>
    
}

/**
 * Request parameters for replaceLeaveType operation in LeaveTypeApi.
 * @export
 * @interface LeaveTypeApiReplaceLeaveTypeRequest
 */
export type LeaveTypeApiReplaceLeaveTypeRequest = {
    
    /**
    * Resource Id
    * @type {string}
    * @memberof LeaveTypeApiReplaceLeaveType
    */
    readonly id: string
    
} & UpdateLeaveTypeRequest

/**
 * Request parameters for updateOneLeaveType operation in LeaveTypeApi.
 * @export
 * @interface LeaveTypeApiUpdateOneLeaveTypeRequest
 */
export type LeaveTypeApiUpdateOneLeaveTypeRequest = {
    
    /**
    * Resource Id
    * @type {string}
    * @memberof LeaveTypeApiUpdateOneLeaveType
    */
    readonly id: string
    
} & UpdateLeaveTypeRequest

/**
 * LeaveTypeApiGenerated - object-oriented interface
 * @export
 * @class LeaveTypeApiGenerated
 * @extends {BaseAPI}
 */
export class LeaveTypeApiGenerated extends BaseAPI {
    /**
     * Create One LeaveType
     * @summary Create One LeaveType
     * @param {LeaveTypeApiCreateOneLeaveTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaveTypeApiGenerated
     */
    public createOneLeaveType(requestParameters: LeaveTypeApiCreateOneLeaveTypeRequest, options?: AxiosRequestConfig) {
        return LeaveTypeApiFp(this.configuration).createOneLeaveType(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete One LeaveType
     * @summary Delete One LeaveType
     * @param {LeaveTypeApiDeleteOneLeaveTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaveTypeApiGenerated
     */
    public deleteOneLeaveType(requestParameters: LeaveTypeApiDeleteOneLeaveTypeRequest, options?: AxiosRequestConfig) {
        return LeaveTypeApiFp(this.configuration).deleteOneLeaveType(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Many LeaveTypes
     * @summary Get Many LeaveTypes
     * @param {LeaveTypeApiGetManyLeaveTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaveTypeApiGenerated
     */
    public getManyLeaveTypes(requestParameters: LeaveTypeApiGetManyLeaveTypesRequest, options?: AxiosRequestConfig) {
        return LeaveTypeApiFp(this.configuration).getManyLeaveTypes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get One LeaveType
     * @summary Get One LeaveType
     * @param {LeaveTypeApiGetOneLeaveTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaveTypeApiGenerated
     */
    public getOneLeaveType(requestParameters: LeaveTypeApiGetOneLeaveTypeRequest, options?: AxiosRequestConfig) {
        return LeaveTypeApiFp(this.configuration).getOneLeaveType(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replace One LeaveType
     * @summary Replace One LeaveType
     * @param {LeaveTypeApiReplaceLeaveTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaveTypeApiGenerated
     */
    public replaceLeaveType(requestParameters: LeaveTypeApiReplaceLeaveTypeRequest, options?: AxiosRequestConfig) {
        return LeaveTypeApiFp(this.configuration).replaceLeaveType(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update One LeaveType
     * @summary Update One LeaveType
     * @param {LeaveTypeApiUpdateOneLeaveTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaveTypeApiGenerated
     */
    public updateOneLeaveType(requestParameters: LeaveTypeApiUpdateOneLeaveTypeRequest, options?: AxiosRequestConfig) {
        return LeaveTypeApiFp(this.configuration).updateOneLeaveType(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
