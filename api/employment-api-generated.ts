/* tslint:disable */
/* eslint-disable */
/*
AlexisHR API

<h1 id=\"introduction\">Introduction</h1>
<p>
  AlexisHR API is currently in preview. This means that small, backward
  incompatible changes might be introduced while in preview. The changes will be
  documented and communicated.
  <a
    href=\"https://cdn.forms-content.sg-form.com/56c6a65c-90a2-11eb-a700-a6de1aea3a1a\"
    target=\"_blank\"
    ><button>Subscribe to updates</button></a
  >
</p>

<h1 id=\"authentication\">Authentication</h1>
<pre class=\"click-to-expand-wrapper is-snippet-wrapper language-undefined\">
<code class=\"is-highlighted language-bash\">curl https://api.alexishr.com/v1/employee \\
  -H \"Authorization: Bearer &lt;your_access_token&gt;\"</code>
</pre>
<p>
  Authenticate your account when using the API by including your secret Access
  Token in the request.
  <a href=\"https://app.alexishr.com/access-tokens\">Manage your Access Tokens</a
  >.
</p>
<p>
  Authentication is performed by passing the Access Token in the Authorization
  header.
</p>
<hr />

<h1 id=\"structure\">Structure</h1>
<p>
  You will find the structure of the API to be highly uniform and consistent.
  Typically every resource can be accessed via a top level endpoint, such as
  <code>/v1/employee</code>. For every such resource, you can perform some of
  the following operations:
</p>
<h2>Operations</h2>
<table>
  <tr>
    <td>GET /v1/:resource</td>
    <td>List all objects of this type</td>
  </tr>
  <tr>
    <td>GET /v1/:resource/:id</td>
    <td>Retrieve a resource by id</td>
  </tr>
  <tr>
    <td>POST /v1/:resource</td>
    <td>Create a resource of this type</td>
  </tr>
  <tr>
    <td>PATCH /v1/:resource/:id</td>
    <td>Update the resource by id</td>
  </tr>
  <tr>
    <td>DELETE /v1/:resource/:id</td>
    <td>Delete the resource by id</td>
  </tr>
</table>
<hr />

<h1 id=\"roles\">Roles</h1>
<p>The Access Tokens will have owner permission on the account</p>
<hr />

<h1 id=\"filters\">Filters</h1>
<p>
  Some of the list endpoints allow to filter results by certain conditions.
  Refer to specific resources to find out what criteria are allowed. Below is a
  list of the different conditions.
</p>

<h4 id=\"eq\"><code>$eq</code></h4>
<p>Find all results matching the attribute value specified.</p>
<div>
  <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$eq]=value</code></pre>
</div>
<p>Can also be simplified like this.</p>
<div>
  <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName]=value</code></pre>
</div>

<h4 id=\"neq\"><code>$neq</code></h4>
<p>Find all results not matching the attribute value specified.</p>
<div>
  <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$neq]=value</code></pre>
</div>

<h4 id=\"gt\"><code>$gt</code>, <code>$gte</code></h4>
<p>
  Find all results where the value is more (<code>$gt</code>) or more and equal
  (<code>$gte</code>) to a given value.
</p>
<div>
  <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$gte]=2020-01-01</code></pre>
</div>
<hr />

<h4 id=\"lt\"><code>$lt</code>, <code>$lte</code></h4>
<p>
  Find all results where the value is less (<code>$lt</code>) or less and equal
  (<code>$lte</code>) to a given value.
</p>
<div>
  <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$lte]=2020-01-01</code></pre>
</div>
<hr />

<h4 id=\"in\"><code>$in</code>, <code>$nin</code></h4>
<p>
  Find all results matching (<code>$in</code>) or not matching
  (<code>$nin</code>) any of the attribute values specified.
</p>
<div>
  <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$in][]=value1&filters[fieldName][$in][]=value2</code></pre>
</div>
<hr />

<h4 id=\"between\"><code>$between</code></h4>
<p>Find all results between two values specified.</p>
<div>
  <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$between][]=2020-01-01&filters[startDate][$between][]=2020-12-31</code></pre>
</div>
<hr />

<h1 id=\"versioning\">Versioning</h1>
<p>
  Each version of the API is guaranteed to be compatible with the resources of
  the same version. When we make breaking changes to the API a new version will
  be published
</p>
<hr />

<h1 id=\"changelog\">Changelog</h1>
<h3>2023-12-20</h3>
<p>Field [updated] added for filter & select for Get Many Employments and Get Many Employees.</p>
<h3>2021-03-15</h3>
<p>First draft was published</p>
<hr />

# Authentication

<!-- ReDoc-Inject: <security-definitions> -->

The version of the OpenAPI document: v1-preview
Contact: support@alexishr.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequestResponse } from '../models';
// @ts-ignore
import { CreateEmploymentRequest } from '../models';
// @ts-ignore
import { EmploymentGetOneResponseMapped } from '../models';
// @ts-ignore
import { EmploymentListManyEmploymentsFiltersParameter } from '../models';
// @ts-ignore
import { EmploymentListManyEmploymentsSortParameter } from '../models';
// @ts-ignore
import { EmploymentResponseMapped } from '../models';
// @ts-ignore
import { EmploymentsGetManyResponseMapped } from '../models';
// @ts-ignore
import { EmptyResponseMapped } from '../models';
// @ts-ignore
import { ForbiddenResponse } from '../models';
// @ts-ignore
import { InternalServerErrorResponse } from '../models';
// @ts-ignore
import { NotFoundResponse } from '../models';
// @ts-ignore
import { UnauthorizedResponse } from '../models';
// @ts-ignore
import { UpdateEmploymentRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmploymentApi - axios parameter creator
 * @export
 */
export const EmploymentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create One Employment
         * @summary Create One Employment
         * @param {CreateEmploymentRequest} createEmploymentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneEmployment: async (createEmploymentRequest: CreateEmploymentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createEmploymentRequest' is not null or undefined
            assertParamExists('createOneEmployment', 'createEmploymentRequest', createEmploymentRequest)
            const localVarPath = `/employment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createEmploymentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/employment',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createEmploymentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get One Employment
         * @summary Get One Employment
         * @param {string} id Resource Id
         * @param {Array<'id' | 'companyId' | 'employeeId' | 'typeId' | 'startDate' | 'endDate' | 'updated' | 'effectiveEndDate' | 'terminated' | 'rate' | 'note' | 'country'>} [select] Select Employment fields, comma-separated. (e.g. &#x60;select&#x3D;id,firstName,lastName,workEmail&#x60;)
         * @param {Array<'type' | 'employee'>} [relations] Select related Employment resources, comma-separated. (e.g. &#x60;relations&#x3D;office,department&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOne: async (id: string, select?: Array<'id' | 'companyId' | 'employeeId' | 'typeId' | 'startDate' | 'endDate' | 'updated' | 'effectiveEndDate' | 'terminated' | 'rate' | 'note' | 'country'>, relations?: Array<'type' | 'employee'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOne', 'id', id)
            const localVarPath = `/employment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (select) {
                localVarQueryParameter['select'] = select.join(COLLECTION_FORMATS.csv);
            }

            if (relations) {
                localVarQueryParameter['relations'] = relations.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/employment/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Many Employments
         * @summary Get Many Employments
         * @param {Array<'id' | 'companyId' | 'employeeId' | 'typeId' | 'startDate' | 'endDate' | 'updated' | 'effectiveEndDate' | 'terminated' | 'rate' | 'note' | 'country'>} [select] Select Employment fields, comma-separated. (e.g. &#x60;select&#x3D;id,firstName,lastName,workEmail&#x60;)
         * @param {Array<'type' | 'employee'>} [relations] Select related Employment resources, comma-separated. (e.g. &#x60;relations&#x3D;office,department&#x60;)
         * @param {EmploymentListManyEmploymentsFiltersParameter} [filters] Filters conditions per field. (e.g. &#x60;filters[id][$eq]&#x3D;507f1f77bcf86cd799439011&#x60;)
         * @param {number} [limit] Limit amount of received Employments. (e.g. &#x60;limit&#x3D;20&#x60;)
         * @param {number} [offset] Offset amount of received Employments. (e.g. &#x60;offset&#x3D;20&#x60;)
         * @param {EmploymentListManyEmploymentsSortParameter} [sort] Sort received Employments by field. (e.g. &#x60;sort[id]&#x3D;asc&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listManyEmployments: async (select?: Array<'id' | 'companyId' | 'employeeId' | 'typeId' | 'startDate' | 'endDate' | 'updated' | 'effectiveEndDate' | 'terminated' | 'rate' | 'note' | 'country'>, relations?: Array<'type' | 'employee'>, filters?: EmploymentListManyEmploymentsFiltersParameter, limit?: number, offset?: number, sort?: EmploymentListManyEmploymentsSortParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/employment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (select) {
                localVarQueryParameter['select'] = select.join(COLLECTION_FORMATS.csv);
            }

            if (relations) {
                localVarQueryParameter['relations'] = relations.join(COLLECTION_FORMATS.csv);
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/employment',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete One Employment
         * @summary Delete One Employment
         * @param {string} id Resource Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeOne', 'id', id)
            const localVarPath = `/employment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/employment/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replace One Employment
         * @summary Replace One Employment
         * @param {string} id Resource Id
         * @param {UpdateEmploymentRequest} updateEmploymentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceOne: async (id: string, updateEmploymentRequest: UpdateEmploymentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('replaceOne', 'id', id)
            // verify required parameter 'updateEmploymentRequest' is not null or undefined
            assertParamExists('replaceOne', 'updateEmploymentRequest', updateEmploymentRequest)
            const localVarPath = `/employment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateEmploymentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/employment/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateEmploymentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update One Employment
         * @summary Update One Employment
         * @param {string} id Resource Id
         * @param {UpdateEmploymentRequest} updateEmploymentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmploymentData: async (id: string, updateEmploymentRequest: UpdateEmploymentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateEmploymentData', 'id', id)
            // verify required parameter 'updateEmploymentRequest' is not null or undefined
            assertParamExists('updateEmploymentData', 'updateEmploymentRequest', updateEmploymentRequest)
            const localVarPath = `/employment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateEmploymentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/employment/{id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateEmploymentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmploymentApi - functional programming interface
 * @export
 */
export const EmploymentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmploymentApiAxiosParamCreator(configuration)
    return {
        /**
         * Create One Employment
         * @summary Create One Employment
         * @param {EmploymentApiCreateOneEmploymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOneEmployment(requestParameters: EmploymentApiCreateOneEmploymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentResponseMapped>> {
            const createEmploymentRequest: CreateEmploymentRequest = {
                employeeId: requestParameters.employeeId,
                userId: requestParameters.userId,
                typeId: requestParameters.typeId,
                startDate: requestParameters.startDate,
                endDate: requestParameters.endDate,
                effectiveEndDate: requestParameters.effectiveEndDate,
                terminated: requestParameters.terminated,
                rate: requestParameters.rate,
                note: requestParameters.note,
                country: requestParameters.country
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOneEmployment(createEmploymentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get One Employment
         * @summary Get One Employment
         * @param {EmploymentApiGetOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOne(requestParameters: EmploymentApiGetOneRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentGetOneResponseMapped>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOne(requestParameters.id, requestParameters.select, requestParameters.relations, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Many Employments
         * @summary Get Many Employments
         * @param {EmploymentApiListManyEmploymentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listManyEmployments(requestParameters: EmploymentApiListManyEmploymentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentsGetManyResponseMapped>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listManyEmployments(requestParameters.select, requestParameters.relations, requestParameters.filters, requestParameters.limit, requestParameters.offset, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete One Employment
         * @summary Delete One Employment
         * @param {EmploymentApiRemoveOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeOne(requestParameters: EmploymentApiRemoveOneRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmptyResponseMapped>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeOne(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replace One Employment
         * @summary Replace One Employment
         * @param {EmploymentApiReplaceOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceOne(requestParameters: EmploymentApiReplaceOneRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentResponseMapped>> {
            const updateEmploymentRequest: UpdateEmploymentRequest = {
                employeeId: requestParameters.employeeId,
                userId: requestParameters.userId,
                typeId: requestParameters.typeId,
                startDate: requestParameters.startDate,
                endDate: requestParameters.endDate,
                effectiveEndDate: requestParameters.effectiveEndDate,
                terminated: requestParameters.terminated,
                rate: requestParameters.rate,
                note: requestParameters.note,
                country: requestParameters.country
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceOne(requestParameters.id, updateEmploymentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update One Employment
         * @summary Update One Employment
         * @param {EmploymentApiUpdateEmploymentDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmploymentData(requestParameters: EmploymentApiUpdateEmploymentDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentResponseMapped>> {
            const updateEmploymentRequest: UpdateEmploymentRequest = {
                employeeId: requestParameters.employeeId,
                userId: requestParameters.userId,
                typeId: requestParameters.typeId,
                startDate: requestParameters.startDate,
                endDate: requestParameters.endDate,
                effectiveEndDate: requestParameters.effectiveEndDate,
                terminated: requestParameters.terminated,
                rate: requestParameters.rate,
                note: requestParameters.note,
                country: requestParameters.country
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmploymentData(requestParameters.id, updateEmploymentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmploymentApi - factory interface
 * @export
 */
export const EmploymentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmploymentApiFp(configuration)
    return {
        /**
         * Create One Employment
         * @summary Create One Employment
         * @param {EmploymentApiCreateOneEmploymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneEmployment(requestParameters: EmploymentApiCreateOneEmploymentRequest, options?: AxiosRequestConfig): AxiosPromise<EmploymentResponseMapped> {
            return localVarFp.createOneEmployment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get One Employment
         * @summary Get One Employment
         * @param {EmploymentApiGetOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOne(requestParameters: EmploymentApiGetOneRequest, options?: AxiosRequestConfig): AxiosPromise<EmploymentGetOneResponseMapped> {
            return localVarFp.getOne(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Many Employments
         * @summary Get Many Employments
         * @param {EmploymentApiListManyEmploymentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listManyEmployments(requestParameters: EmploymentApiListManyEmploymentsRequest, options?: AxiosRequestConfig): AxiosPromise<EmploymentsGetManyResponseMapped> {
            return localVarFp.listManyEmployments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete One Employment
         * @summary Delete One Employment
         * @param {EmploymentApiRemoveOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeOne(requestParameters: EmploymentApiRemoveOneRequest, options?: AxiosRequestConfig): AxiosPromise<EmptyResponseMapped> {
            return localVarFp.removeOne(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace One Employment
         * @summary Replace One Employment
         * @param {EmploymentApiReplaceOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceOne(requestParameters: EmploymentApiReplaceOneRequest, options?: AxiosRequestConfig): AxiosPromise<EmploymentResponseMapped> {
            return localVarFp.replaceOne(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update One Employment
         * @summary Update One Employment
         * @param {EmploymentApiUpdateEmploymentDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmploymentData(requestParameters: EmploymentApiUpdateEmploymentDataRequest, options?: AxiosRequestConfig): AxiosPromise<EmploymentResponseMapped> {
            return localVarFp.updateEmploymentData(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createOneEmployment operation in EmploymentApi.
 * @export
 * @interface EmploymentApiCreateOneEmploymentRequest
 */
export type EmploymentApiCreateOneEmploymentRequest = {
    
} & CreateEmploymentRequest

/**
 * Request parameters for getOne operation in EmploymentApi.
 * @export
 * @interface EmploymentApiGetOneRequest
 */
export type EmploymentApiGetOneRequest = {
    
    /**
    * Resource Id
    * @type {string}
    * @memberof EmploymentApiGetOne
    */
    readonly id: string
    
    /**
    * Select Employment fields, comma-separated. (e.g. `select=id,firstName,lastName,workEmail`)
    * @type {Array<'id' | 'companyId' | 'employeeId' | 'typeId' | 'startDate' | 'endDate' | 'updated' | 'effectiveEndDate' | 'terminated' | 'rate' | 'note' | 'country'>}
    * @memberof EmploymentApiGetOne
    */
    readonly select?: Array<'id' | 'companyId' | 'employeeId' | 'typeId' | 'startDate' | 'endDate' | 'updated' | 'effectiveEndDate' | 'terminated' | 'rate' | 'note' | 'country'>
    
    /**
    * Select related Employment resources, comma-separated. (e.g. `relations=office,department`)
    * @type {Array<'type' | 'employee'>}
    * @memberof EmploymentApiGetOne
    */
    readonly relations?: Array<'type' | 'employee'>
    
}

/**
 * Request parameters for listManyEmployments operation in EmploymentApi.
 * @export
 * @interface EmploymentApiListManyEmploymentsRequest
 */
export type EmploymentApiListManyEmploymentsRequest = {
    
    /**
    * Select Employment fields, comma-separated. (e.g. `select=id,firstName,lastName,workEmail`)
    * @type {Array<'id' | 'companyId' | 'employeeId' | 'typeId' | 'startDate' | 'endDate' | 'updated' | 'effectiveEndDate' | 'terminated' | 'rate' | 'note' | 'country'>}
    * @memberof EmploymentApiListManyEmployments
    */
    readonly select?: Array<'id' | 'companyId' | 'employeeId' | 'typeId' | 'startDate' | 'endDate' | 'updated' | 'effectiveEndDate' | 'terminated' | 'rate' | 'note' | 'country'>
    
    /**
    * Select related Employment resources, comma-separated. (e.g. `relations=office,department`)
    * @type {Array<'type' | 'employee'>}
    * @memberof EmploymentApiListManyEmployments
    */
    readonly relations?: Array<'type' | 'employee'>
    
    /**
    * Filters conditions per field. (e.g. `filters[id][$eq]=507f1f77bcf86cd799439011`)
    * @type {EmploymentListManyEmploymentsFiltersParameter}
    * @memberof EmploymentApiListManyEmployments
    */
    readonly filters?: EmploymentListManyEmploymentsFiltersParameter
    
    /**
    * Limit amount of received Employments. (e.g. `limit=20`)
    * @type {number}
    * @memberof EmploymentApiListManyEmployments
    */
    readonly limit?: number
    
    /**
    * Offset amount of received Employments. (e.g. `offset=20`)
    * @type {number}
    * @memberof EmploymentApiListManyEmployments
    */
    readonly offset?: number
    
    /**
    * Sort received Employments by field. (e.g. `sort[id]=asc`)
    * @type {EmploymentListManyEmploymentsSortParameter}
    * @memberof EmploymentApiListManyEmployments
    */
    readonly sort?: EmploymentListManyEmploymentsSortParameter
    
}

/**
 * Request parameters for removeOne operation in EmploymentApi.
 * @export
 * @interface EmploymentApiRemoveOneRequest
 */
export type EmploymentApiRemoveOneRequest = {
    
    /**
    * Resource Id
    * @type {string}
    * @memberof EmploymentApiRemoveOne
    */
    readonly id: string
    
}

/**
 * Request parameters for replaceOne operation in EmploymentApi.
 * @export
 * @interface EmploymentApiReplaceOneRequest
 */
export type EmploymentApiReplaceOneRequest = {
    
    /**
    * Resource Id
    * @type {string}
    * @memberof EmploymentApiReplaceOne
    */
    readonly id: string
    
} & UpdateEmploymentRequest

/**
 * Request parameters for updateEmploymentData operation in EmploymentApi.
 * @export
 * @interface EmploymentApiUpdateEmploymentDataRequest
 */
export type EmploymentApiUpdateEmploymentDataRequest = {
    
    /**
    * Resource Id
    * @type {string}
    * @memberof EmploymentApiUpdateEmploymentData
    */
    readonly id: string
    
} & UpdateEmploymentRequest

/**
 * EmploymentApiGenerated - object-oriented interface
 * @export
 * @class EmploymentApiGenerated
 * @extends {BaseAPI}
 */
export class EmploymentApiGenerated extends BaseAPI {
    /**
     * Create One Employment
     * @summary Create One Employment
     * @param {EmploymentApiCreateOneEmploymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmploymentApiGenerated
     */
    public createOneEmployment(requestParameters: EmploymentApiCreateOneEmploymentRequest, options?: AxiosRequestConfig) {
        return EmploymentApiFp(this.configuration).createOneEmployment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get One Employment
     * @summary Get One Employment
     * @param {EmploymentApiGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmploymentApiGenerated
     */
    public getOne(requestParameters: EmploymentApiGetOneRequest, options?: AxiosRequestConfig) {
        return EmploymentApiFp(this.configuration).getOne(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Many Employments
     * @summary Get Many Employments
     * @param {EmploymentApiListManyEmploymentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmploymentApiGenerated
     */
    public listManyEmployments(requestParameters: EmploymentApiListManyEmploymentsRequest, options?: AxiosRequestConfig) {
        return EmploymentApiFp(this.configuration).listManyEmployments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete One Employment
     * @summary Delete One Employment
     * @param {EmploymentApiRemoveOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmploymentApiGenerated
     */
    public removeOne(requestParameters: EmploymentApiRemoveOneRequest, options?: AxiosRequestConfig) {
        return EmploymentApiFp(this.configuration).removeOne(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replace One Employment
     * @summary Replace One Employment
     * @param {EmploymentApiReplaceOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmploymentApiGenerated
     */
    public replaceOne(requestParameters: EmploymentApiReplaceOneRequest, options?: AxiosRequestConfig) {
        return EmploymentApiFp(this.configuration).replaceOne(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update One Employment
     * @summary Update One Employment
     * @param {EmploymentApiUpdateEmploymentDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmploymentApiGenerated
     */
    public updateEmploymentData(requestParameters: EmploymentApiUpdateEmploymentDataRequest, options?: AxiosRequestConfig) {
        return EmploymentApiFp(this.configuration).updateEmploymentData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
